// <auto-generated />
using System;
using API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20250207192400_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("CountryId")
                        .HasColumnType("smallint")
                        .HasColumnName("CountryID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstLine")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondLine")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("AddressId")
                        .HasName("Addresses_pk");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("API.Models.Customers.CustomerStatistic", b =>
                {
                    b.Property<int>("CustomerStatisticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerStatisticsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerStatisticsId"));

                    b.Property<short>("ActiveRentals")
                        .HasColumnType("smallint");

                    b.Property<int>("CanceledRentals")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRentalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastRentalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalRentals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("CustomerStatisticsId")
                        .HasName("CustomerStatistics_pk");

                    b.ToTable("CustomerStatistics");
                });

            modelBuilder.Entity("API.Models.Customers.CustomerType", b =>
                {
                    b.Property<int>("CustomerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerTypeId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CustomerType1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CustomerType");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short?>("MaxRentals")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerTypeId")
                        .HasName("CustomerTypes_pk");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("API.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<int>("CreatedByEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByEmployeeID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("DocumentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentCategoryID");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentTypeID");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("FileSizeMb")
                        .HasColumnType("float")
                        .HasColumnName("FileSizeMB");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("ModifiedByEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("ModifiedByEmployeeID");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("RentalId")
                        .HasColumnType("int")
                        .HasColumnName("RentalID");

                    b.Property<int?>("RentalPlaceId")
                        .HasColumnType("int")
                        .HasColumnName("RentalPlaceID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.HasKey("DocumentId")
                        .HasName("Documents_pk");

                    b.HasIndex("CreatedByEmployeeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DocumentCategoryId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedByEmployeeId");

                    b.HasIndex("RentalId");

                    b.HasIndex("RentalPlaceId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("API.Models.DocumentCategory", b =>
                {
                    b.Property<int>("DocumentCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentCategoryId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ParentCategoryID");

                    b.HasKey("DocumentCategoryId")
                        .HasName("DocumentCategories_pk");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("DocumentCategories");
                });

            modelBuilder.Entity("API.Models.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentTypeId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxFileSizeMb")
                        .HasColumnType("int")
                        .HasColumnName("MaxFileSizeMB");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DocumentTypeId")
                        .HasName("DocumentTypes_pk");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("API.Models.EmployeeAttendance", b =>
                {
                    b.Property<int>("EmployeeAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeAttendanceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeAttendanceId"));

                    b.Property<DateTime>("CheckInTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("CheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("TotalTime")
                        .HasColumnType("float");

                    b.HasKey("EmployeeAttendanceId")
                        .HasName("EmployeeAttendance_pk");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAttendance", (string)null);
                });

            modelBuilder.Entity("API.Models.EmployeeLeave", b =>
                {
                    b.Property<int>("EmployeeLeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeLeaveID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeLeaveId"));

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApprovedById")
                        .HasColumnType("int")
                        .HasColumnName("ApprovedByID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int>("EmployeeLeaveTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeLeaveTypeID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("EmployeeLeaveId")
                        .HasName("EmployeeLeave_pk");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeLeaveTypeId");

                    b.ToTable("EmployeeLeave", (string)null);
                });

            modelBuilder.Entity("API.Models.EmployeeRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("ManageEmployees")
                        .HasColumnType("bit");

                    b.Property<bool>("ManageLeaves")
                        .HasColumnType("bit");

                    b.Property<bool>("ManageRentals")
                        .HasColumnType("bit");

                    b.Property<bool>("ManageSchedule")
                        .HasColumnType("bit");

                    b.Property<bool>("ManageVehicles")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RolePower")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("EmployeeRoles", (string)null);
                });

            modelBuilder.Entity("API.Models.Employees.EmployeeFinance", b =>
                {
                    b.Property<int>("EmployeeFinancesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeFinancesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeFinancesId"));

                    b.Property<decimal?>("BaseSalary")
                        .HasColumnType("money");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("money");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeFinancesId")
                        .HasName("EmployeeFinances_pk");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeFinances");
                });

            modelBuilder.Entity("API.Models.Employees.EmployeeLeaveType", b =>
                {
                    b.Property<int>("EmployeeLeaveTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeLeaveTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeLeaveTypeId"));

                    b.Property<int>("DefaultDays")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EmployeeLeaveTypeId")
                        .HasName("EmployeeLeaveTypes_pk");

                    b.ToTable("EmployeeLeaveTypes");
                });

            modelBuilder.Entity("API.Models.Employees.EmployeePosition", b =>
                {
                    b.Property<int>("EmployeePositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeePositionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeePositionId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("DefaultBaseSalary")
                        .HasColumnType("money");

                    b.Property<decimal?>("DefaultHourlyRate")
                        .HasColumnType("money");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EmployeePositionId")
                        .HasName("EmployeePositions_pk");

                    b.ToTable("EmployeePositions");
                });

            modelBuilder.Entity("API.Models.Employees.EmployeeSchedule", b =>
                {
                    b.Property<int>("EmployeeScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeScheduleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeScheduleId"));

                    b.Property<int>("CreatedByEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByEmployeeID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int>("EmployeeShiftTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeShiftTypeID");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("ModifiedByEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("ModifiedByEmployeeID");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlaceOfWorkId")
                        .HasColumnType("int")
                        .HasColumnName("PlaceOfWorkID");

                    b.HasKey("EmployeeScheduleId")
                        .HasName("EmployeeSchedules_pk");

                    b.HasIndex("CreatedByEmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeShiftTypeId");

                    b.HasIndex("ModifiedByEmployeeId");

                    b.HasIndex("PlaceOfWorkId");

                    b.ToTable("EmployeeSchedules");
                });

            modelBuilder.Entity("API.Models.Employees.EmployeeShiftType", b =>
                {
                    b.Property<int>("EmployeeShiftTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeShiftTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeShiftTypeId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeShiftTypeId")
                        .HasName("EmployeeShiftTypes_pk");

                    b.ToTable("EmployeeShiftTypes");
                });

            modelBuilder.Entity("API.Models.Employees.EmployeeStatistic", b =>
                {
                    b.Property<int>("EmployeeStatisticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeStatisticsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeStatisticsId"));

                    b.Property<int>("EarlyDepartures")
                        .HasColumnType("int");

                    b.Property<int>("LateArrivals")
                        .HasColumnType("int");

                    b.Property<double>("OvertimeHours")
                        .HasColumnType("float");

                    b.Property<int>("SickLeavesTaken")
                        .HasColumnType("int");

                    b.Property<int?>("TotalRentalsApproved")
                        .HasColumnType("int");

                    b.Property<int>("TotalWorkDays")
                        .HasColumnType("int");

                    b.Property<int>("UnpaidLeavesTaken")
                        .HasColumnType("int");

                    b.Property<int>("VacationDaysTaken")
                        .HasColumnType("int");

                    b.HasKey("EmployeeStatisticsId")
                        .HasName("EmployeeStatistics_pk");

                    b.ToTable("EmployeeStatistics");
                });

            modelBuilder.Entity("API.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NewsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsId"));

                    b.Property<int>("Content")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByEmployeeID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int")
                        .HasColumnName("ImageID");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("ModifiedByEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("ModifiedByEmployeeID");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsTypeId")
                        .HasColumnType("int")
                        .HasColumnName("NewsTypeID");

                    b.HasKey("NewsId")
                        .HasName("News_pk");

                    b.HasIndex("CreatedByEmployeeId");

                    b.HasIndex("ImageId");

                    b.HasIndex("ModifiedByEmployeeId");

                    b.HasIndex("NewsTypeId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("API.Models.NewsType", b =>
                {
                    b.Property<int>("NewsTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NewsTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsTypeId"));

                    b.Property<bool>("AllowImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxContentSize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("NewsTypeId")
                        .HasName("NewsTypes_pk");

                    b.ToTable("NewsTypes");
                });

            modelBuilder.Entity("API.Models.Other.Country", b =>
                {
                    b.Property<short>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("CountryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("CountryId"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DialingCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CountryId")
                        .HasName("Countries_pk");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("API.Models.Other.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Gpslatitude")
                        .HasColumnType("float")
                        .HasColumnName("GPSLatitude");

                    b.Property<double>("Gpslongitude")
                        .HasColumnType("float")
                        .HasColumnName("GPSLongitude");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("RentalPlaceId")
                        .HasColumnType("int")
                        .HasColumnName("RentalPlaceID");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.HasKey("LocationId")
                        .HasName("Locations_pk");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("API.Models.Other.RentalPlace", b =>
                {
                    b.Property<int>("RentalPlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RentalPlaceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalPlaceId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RentalPlaceId")
                        .HasName("RentalPlaces_pk");

                    b.HasIndex("AddressId");

                    b.HasIndex("LocationId");

                    b.ToTable("RentalPlaces");
                });

            modelBuilder.Entity("API.Models.Rentals.PostRentalReport", b =>
                {
                    b.Property<int>("PostRentalReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostRentalReportID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostRentalReportId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("InspectorEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("InspectorEmployeeID");

                    b.Property<bool>("IsCarDamaged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarRefueled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomerLate")
                        .HasColumnType("bit");

                    b.HasKey("PostRentalReportId")
                        .HasName("PostRentalReports_pk");

                    b.HasIndex("InspectorEmployeeId");

                    b.ToTable("PostRentalReports");
                });

            modelBuilder.Entity("API.Models.Rentals.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RentalID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalId"));

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("money");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Cost")
                        .HasColumnType("money");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FinishedByEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("FinishedByEmployeeID");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PostRentalReportId")
                        .HasColumnType("int")
                        .HasColumnName("PostRentalReportID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartedByEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("StartedByEmployeeID");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.HasKey("RentalId")
                        .HasName("Rentals_pk");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FinishedByEmployeeId");

                    b.HasIndex("PostRentalReportId");

                    b.HasIndex("StartedByEmployeeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("API.Models.Rentals.RentalRequest", b =>
                {
                    b.Property<int>("RentalRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RentalRequestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalRequestId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.HasKey("RentalRequestId")
                        .HasName("RentalRequests_pk");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RentalRequests");
                });

            modelBuilder.Entity("API.Models.VehicleBrand", b =>
                {
                    b.Property<int>("VehicleBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleBrandID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleBrandId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("LogoURL");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("VehicleBrandId")
                        .HasName("VehicleBrands_pk");

                    b.ToTable("VehicleBrands");
                });

            modelBuilder.Entity("API.Models.VehicleModel", b =>
                {
                    b.Property<int>("VehicleModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleModelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleModelId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double?>("EngineSize")
                        .HasColumnType("float");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("HorsePower")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VehicleBrandId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleBrandID");

                    b.HasKey("VehicleModelId")
                        .HasName("VehicleModels_pk");

                    b.HasIndex("VehicleBrandId");

                    b.ToTable("VehicleModels");
                });

            modelBuilder.Entity("API.Models.Vehicles.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CurrentMileage")
                        .HasColumnType("int");

                    b.Property<decimal?>("CustomDailyRate")
                        .HasColumnType("money");

                    b.Property<decimal?>("CustomDeposit")
                        .HasColumnType("money");

                    b.Property<decimal?>("CustomWeeklyRate")
                        .HasColumnType("money");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAvailableForRent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastMaintenanceMileage")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<int>("ManufactureYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("money");

                    b.Property<int>("RentalPlaceId")
                        .HasColumnType("int")
                        .HasColumnName("RentalPlaceID");

                    b.Property<int>("VehicleModelId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleModelID");

                    b.Property<int>("VehicleOptionalInformationId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleOptionalInformationID");

                    b.Property<int>("VehicleStatisticsId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleStatisticsID");

                    b.Property<int>("VehicleStatusId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleStatusID");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleTypeID");

                    b.Property<string>("Vin")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("VIN");

                    b.HasKey("VehicleId")
                        .HasName("VehicleID");

                    b.HasIndex("LocationId");

                    b.HasIndex("RentalPlaceId");

                    b.HasIndex("VehicleModelId");

                    b.HasIndex("VehicleOptionalInformationId");

                    b.HasIndex("VehicleStatisticsId");

                    b.HasIndex("VehicleStatusId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("API.Models.Vehicles.VehicleOptionalInformation", b =>
                {
                    b.Property<int>("VehicleOptionalInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleOptionalInformationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleOptionalInformationId"));

                    b.Property<bool>("HasAirConditioning")
                        .HasColumnType("bit");

                    b.Property<bool>("HasAutomaticTransmission")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBluetooth")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCruiseControl")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNavigation")
                        .HasColumnType("bit");

                    b.Property<bool>("HasParkingSensors")
                        .HasColumnType("bit");

                    b.HasKey("VehicleOptionalInformationId")
                        .HasName("VehicleOptionalInformation_pk");

                    b.ToTable("VehicleOptionalInformation");
                });

            modelBuilder.Entity("API.Models.Vehicles.VehicleStatistic", b =>
                {
                    b.Property<int>("VehicleStatisticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleStatisticsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleStatisticsId"));

                    b.Property<DateTime?>("FirstRentalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastRentalDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RentalRevenue")
                        .HasColumnType("money");

                    b.Property<int>("TotalRentals")
                        .HasColumnType("int");

                    b.HasKey("VehicleStatisticsId")
                        .HasName("VehicleStatistics_pk");

                    b.ToTable("VehicleStatistics");
                });

            modelBuilder.Entity("API.Models.Vehicles.VehicleStatus", b =>
                {
                    b.Property<int>("VehicleStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleStatusId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VehicleStatusId")
                        .HasName("VehicleStatus_pk");

                    b.ToTable("VehicleStatuses");
                });

            modelBuilder.Entity("API.Models.Vehicles.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleTypeId"));

                    b.Property<decimal>("BaseDailyRate")
                        .HasColumnType("money");

                    b.Property<decimal>("BaseDeposit")
                        .HasColumnType("money");

                    b.Property<decimal>("BaseWeeklyRate")
                        .HasColumnType("money");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RequiredLicenseType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("B");

                    b.HasKey("VehicleTypeId")
                        .HasName("VehicleTypes_pk");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Models.Customers.Customer", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<int>");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<bool>("ApprovedA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("ApprovedB")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("ApprovedC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerStatisticsId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerStatisticsID");

                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerTypeID");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerStatisticsId");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("API.Models.Employees.Employee", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<int>");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeFinancesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeFinancesID");

                    b.Property<int>("EmployeePositionId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeePositionID");

                    b.Property<int>("EmployeeStatisticsId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeStatisticsID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RentalPlaceId")
                        .HasColumnType("int")
                        .HasColumnName("RentalPlaceID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int")
                        .HasColumnName("SupervisorID");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("AddressId");

                    b.HasIndex("EmployeeFinancesId");

                    b.HasIndex("EmployeePositionId");

                    b.HasIndex("EmployeeStatisticsId");

                    b.HasIndex("RentalPlaceId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("API.Models.Address", b =>
                {
                    b.HasOne("API.Models.Other.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("Addresses_Countries");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("API.Models.Document", b =>
                {
                    b.HasOne("API.Models.Employees.Employee", "CreatedByEmployee")
                        .WithMany("DocumentCreatedByEmployees")
                        .HasForeignKey("CreatedByEmployeeId")
                        .IsRequired()
                        .HasConstraintName("Documents_Employees_CreatedByEmployeeID");

                    b.HasOne("API.Models.Customers.Customer", "Customer")
                        .WithMany("Documents")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("Documents_Customers");

                    b.HasOne("API.Models.DocumentCategory", "DocumentCategory")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentCategoryId")
                        .IsRequired()
                        .HasConstraintName("Documents_DocumentCategories");

                    b.HasOne("API.Models.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .IsRequired()
                        .HasConstraintName("Documents_DocumentTypes");

                    b.HasOne("API.Models.Employees.Employee", "Employee")
                        .WithMany("DocumentEmployees")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("Documents_Employees");

                    b.HasOne("API.Models.Employees.Employee", "ModifiedByEmployee")
                        .WithMany("DocumentModifiedByEmployees")
                        .HasForeignKey("ModifiedByEmployeeId")
                        .HasConstraintName("Documents_Employees_ModifiedByEmployeeID");

                    b.HasOne("API.Models.Rentals.Rental", "Rental")
                        .WithMany("Documents")
                        .HasForeignKey("RentalId")
                        .HasConstraintName("Documents_Rentals");

                    b.HasOne("API.Models.Other.RentalPlace", "RentalPlace")
                        .WithMany("Documents")
                        .HasForeignKey("RentalPlaceId")
                        .HasConstraintName("Documents_RentalPlaces");

                    b.HasOne("API.Models.Vehicles.Vehicle", "Vehicle")
                        .WithMany("Documents")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("Documents_Vehicles");

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("Customer");

                    b.Navigation("DocumentCategory");

                    b.Navigation("DocumentType");

                    b.Navigation("Employee");

                    b.Navigation("ModifiedByEmployee");

                    b.Navigation("Rental");

                    b.Navigation("RentalPlace");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("API.Models.DocumentCategory", b =>
                {
                    b.HasOne("API.Models.DocumentCategory", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("DocumentCategories_DocumentCategories");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("API.Models.EmployeeAttendance", b =>
                {
                    b.HasOne("API.Models.Employees.Employee", "Employee")
                        .WithMany("EmployeeAttendances")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("EmployeeAttendance_Employees");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.Models.EmployeeLeave", b =>
                {
                    b.HasOne("API.Models.Employees.Employee", "ApprovedBy")
                        .WithMany("EmployeeLeaveApprovedBies")
                        .HasForeignKey("ApprovedById")
                        .IsRequired()
                        .HasConstraintName("EmployeeLeave_Employees_ApprovedByID");

                    b.HasOne("API.Models.Employees.Employee", "Employee")
                        .WithMany("EmployeeLeaveEmployees")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("EmployeeLeave_Employees");

                    b.HasOne("API.Models.Employees.EmployeeLeaveType", "EmployeeLeaveType")
                        .WithMany("EmployeeLeaves")
                        .HasForeignKey("EmployeeLeaveTypeId")
                        .IsRequired()
                        .HasConstraintName("EmployeeLeave_EmployeeLeaveTypes");

                    b.Navigation("ApprovedBy");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeLeaveType");
                });

            modelBuilder.Entity("API.Models.Employees.EmployeeFinance", b =>
                {
                    b.HasOne("API.Models.Employees.Employee", null)
                        .WithMany("EmployeeFinancesNavigation")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("API.Models.Employees.EmployeeSchedule", b =>
                {
                    b.HasOne("API.Models.Employees.Employee", "CreatedByEmployee")
                        .WithMany("EmployeeScheduleCreatedByEmployees")
                        .HasForeignKey("CreatedByEmployeeId")
                        .IsRequired()
                        .HasConstraintName("EmployeeSchedule_Employees_CreatedByEmployeeID");

                    b.HasOne("API.Models.Employees.Employee", "Employee")
                        .WithMany("EmployeeScheduleEmployees")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("EmployeeSchedule_Employees");

                    b.HasOne("API.Models.Employees.EmployeeShiftType", "EmployeeShiftType")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("EmployeeShiftTypeId")
                        .IsRequired()
                        .HasConstraintName("EmployeeSchedule_EmployeeShiftType");

                    b.HasOne("API.Models.Employees.Employee", "ModifiedByEmployee")
                        .WithMany("EmployeeScheduleModifiedByEmployees")
                        .HasForeignKey("ModifiedByEmployeeId")
                        .HasConstraintName("EmployeeSchedule_Employees_ModifiedByEmployeeID");

                    b.HasOne("API.Models.Other.RentalPlace", "PlaceOfWork")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("PlaceOfWorkId")
                        .HasConstraintName("EmployeeSchedule_RentalPlaces");

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeShiftType");

                    b.Navigation("ModifiedByEmployee");

                    b.Navigation("PlaceOfWork");
                });

            modelBuilder.Entity("API.Models.News", b =>
                {
                    b.HasOne("API.Models.Employees.Employee", "CreatedByEmployee")
                        .WithMany("NewsCreatedByEmployees")
                        .HasForeignKey("CreatedByEmployeeId")
                        .IsRequired()
                        .HasConstraintName("News_Employees");

                    b.HasOne("API.Models.Document", "Image")
                        .WithMany("News")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("News_Documents");

                    b.HasOne("API.Models.Employees.Employee", "ModifiedByEmployee")
                        .WithMany("NewsModifiedByEmployees")
                        .HasForeignKey("ModifiedByEmployeeId")
                        .HasConstraintName("News_Employees_ModifiedByEmployeeID");

                    b.HasOne("API.Models.NewsType", "NewsType")
                        .WithMany("News")
                        .HasForeignKey("NewsTypeId")
                        .IsRequired()
                        .HasConstraintName("News_NewsTypes");

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("Image");

                    b.Navigation("ModifiedByEmployee");

                    b.Navigation("NewsType");
                });

            modelBuilder.Entity("API.Models.Other.RentalPlace", b =>
                {
                    b.HasOne("API.Models.Address", "Address")
                        .WithMany("RentalPlaces")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("RentalPlaces_Addresses");

                    b.HasOne("API.Models.Other.Location", "Location")
                        .WithMany("RentalPlaces")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("RentalPlaces_Locations");

                    b.Navigation("Address");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("API.Models.Rentals.PostRentalReport", b =>
                {
                    b.HasOne("API.Models.Employees.Employee", "InspectorEmployee")
                        .WithMany("PostRentalReports")
                        .HasForeignKey("InspectorEmployeeId")
                        .IsRequired()
                        .HasConstraintName("PostRentalReports_Employees");

                    b.Navigation("InspectorEmployee");
                });

            modelBuilder.Entity("API.Models.Rentals.Rental", b =>
                {
                    b.HasOne("API.Models.Customers.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("Rentals_Customers");

                    b.HasOne("API.Models.Employees.Employee", "FinishedByEmployee")
                        .WithMany("RentalFinishedByEmployees")
                        .HasForeignKey("FinishedByEmployeeId")
                        .HasConstraintName("Rentals_Employees");

                    b.HasOne("API.Models.Rentals.PostRentalReport", "PostRentalReport")
                        .WithMany("Rentals")
                        .HasForeignKey("PostRentalReportId")
                        .HasConstraintName("Rentals_PostRentalReports");

                    b.HasOne("API.Models.Employees.Employee", "StartedByEmployee")
                        .WithMany("RentalStartedByEmployees")
                        .HasForeignKey("StartedByEmployeeId")
                        .IsRequired()
                        .HasConstraintName("Rentals_Employees_StartedByEmployeeID");

                    b.HasOne("API.Models.Vehicles.Vehicle", "Vehicle")
                        .WithMany("Rentals")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("Rentals_Vehicles");

                    b.Navigation("Customer");

                    b.Navigation("FinishedByEmployee");

                    b.Navigation("PostRentalReport");

                    b.Navigation("StartedByEmployee");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("API.Models.Rentals.RentalRequest", b =>
                {
                    b.HasOne("API.Models.Customers.Customer", "Customer")
                        .WithMany("RentalRequests")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("RentalRequests_Customers");

                    b.HasOne("API.Models.Vehicles.Vehicle", "Vehicle")
                        .WithMany("RentalRequests")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("RentalRequests_Vehicles");

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("API.Models.VehicleModel", b =>
                {
                    b.HasOne("API.Models.VehicleBrand", "VehicleBrand")
                        .WithMany("VehicleModels")
                        .HasForeignKey("VehicleBrandId")
                        .IsRequired()
                        .HasConstraintName("VehicleModels_VehicleBrands");

                    b.Navigation("VehicleBrand");
                });

            modelBuilder.Entity("API.Models.Vehicles.Vehicle", b =>
                {
                    b.HasOne("API.Models.Other.Location", "Location")
                        .WithMany("Vehicles")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("Vehicles_Locations");

                    b.HasOne("API.Models.Other.RentalPlace", "RentalPlace")
                        .WithMany("Vehicles")
                        .HasForeignKey("RentalPlaceId")
                        .IsRequired()
                        .HasConstraintName("Vehicles_RentalPlaces");

                    b.HasOne("API.Models.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .IsRequired()
                        .HasConstraintName("Vehicles_VehicleModels");

                    b.HasOne("API.Models.Vehicles.VehicleOptionalInformation", "VehicleOptionalInformation")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleOptionalInformationId")
                        .IsRequired()
                        .HasConstraintName("Vehicles_VehicleOptionalInformation");

                    b.HasOne("API.Models.Vehicles.VehicleStatistic", "VehicleStatistics")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleStatisticsId")
                        .IsRequired()
                        .HasConstraintName("Vehicles_VehicleStatistics");

                    b.HasOne("API.Models.Vehicles.VehicleStatus", "VehicleStatus")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleStatusId")
                        .IsRequired()
                        .HasConstraintName("Vehicles_VehicleStatus");

                    b.HasOne("API.Models.Vehicles.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .IsRequired()
                        .HasConstraintName("Vehicles_VehicleTypes");

                    b.Navigation("Location");

                    b.Navigation("RentalPlace");

                    b.Navigation("VehicleModel");

                    b.Navigation("VehicleOptionalInformation");

                    b.Navigation("VehicleStatistics");

                    b.Navigation("VehicleStatus");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("API.Models.EmployeeRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("API.Models.EmployeeRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.Customers.Customer", b =>
                {
                    b.HasOne("API.Models.Address", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("Customers_Addresses");

                    b.HasOne("API.Models.Customers.CustomerStatistic", "CustomerStatistics")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerStatisticsId")
                        .IsRequired()
                        .HasConstraintName("Customers_CustomerStatistics");

                    b.HasOne("API.Models.Customers.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .IsRequired()
                        .HasConstraintName("Customers_CustomerTypes");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithOne()
                        .HasForeignKey("API.Models.Customers.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("CustomerStatistics");

                    b.Navigation("CustomerType");
                });

            modelBuilder.Entity("API.Models.Employees.Employee", b =>
                {
                    b.HasOne("API.Models.Address", "Address")
                        .WithMany("Employees")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("Employees_Addresses");

                    b.HasOne("API.Models.Employees.EmployeeFinance", "EmployeeFinances")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeFinancesId")
                        .IsRequired()
                        .HasConstraintName("Employees_EmployeeFinances");

                    b.HasOne("API.Models.Employees.EmployeePosition", "EmployeePosition")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeePositionId")
                        .IsRequired()
                        .HasConstraintName("Employees_EmployeePositions");

                    b.HasOne("API.Models.Employees.EmployeeStatistic", "EmployeeStatistics")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeStatisticsId")
                        .IsRequired()
                        .HasConstraintName("Employees_EmployeeStatistics");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithOne()
                        .HasForeignKey("API.Models.Employees.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Other.RentalPlace", "RentalPlace")
                        .WithMany("Employees")
                        .HasForeignKey("RentalPlaceId")
                        .IsRequired()
                        .HasConstraintName("Employees_RentalPlaces");

                    b.HasOne("API.Models.Employees.Employee", "Supervisor")
                        .WithMany("InverseSupervisor")
                        .HasForeignKey("SupervisorId")
                        .HasConstraintName("Employees_Employees");

                    b.Navigation("Address");

                    b.Navigation("EmployeeFinances");

                    b.Navigation("EmployeePosition");

                    b.Navigation("EmployeeStatistics");

                    b.Navigation("RentalPlace");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("API.Models.Address", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Employees");

                    b.Navigation("RentalPlaces");
                });

            modelBuilder.Entity("API.Models.Customers.CustomerStatistic", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("API.Models.Customers.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("API.Models.Document", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("API.Models.DocumentCategory", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("InverseParentCategory");
                });

            modelBuilder.Entity("API.Models.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("API.Models.Employees.EmployeeFinance", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("API.Models.Employees.EmployeeLeaveType", b =>
                {
                    b.Navigation("EmployeeLeaves");
                });

            modelBuilder.Entity("API.Models.Employees.EmployeePosition", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("API.Models.Employees.EmployeeShiftType", b =>
                {
                    b.Navigation("EmployeeSchedules");
                });

            modelBuilder.Entity("API.Models.Employees.EmployeeStatistic", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("API.Models.NewsType", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("API.Models.Other.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("API.Models.Other.Location", b =>
                {
                    b.Navigation("RentalPlaces");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("API.Models.Other.RentalPlace", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("EmployeeSchedules");

                    b.Navigation("Employees");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("API.Models.Rentals.PostRentalReport", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("API.Models.Rentals.Rental", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("API.Models.VehicleBrand", b =>
                {
                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("API.Models.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("API.Models.Vehicles.Vehicle", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("RentalRequests");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("API.Models.Vehicles.VehicleOptionalInformation", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("API.Models.Vehicles.VehicleStatistic", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("API.Models.Vehicles.VehicleStatus", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("API.Models.Vehicles.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("API.Models.Customers.Customer", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("RentalRequests");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("API.Models.Employees.Employee", b =>
                {
                    b.Navigation("DocumentCreatedByEmployees");

                    b.Navigation("DocumentEmployees");

                    b.Navigation("DocumentModifiedByEmployees");

                    b.Navigation("EmployeeAttendances");

                    b.Navigation("EmployeeFinancesNavigation");

                    b.Navigation("EmployeeLeaveApprovedBies");

                    b.Navigation("EmployeeLeaveEmployees");

                    b.Navigation("EmployeeScheduleCreatedByEmployees");

                    b.Navigation("EmployeeScheduleEmployees");

                    b.Navigation("EmployeeScheduleModifiedByEmployees");

                    b.Navigation("InverseSupervisor");

                    b.Navigation("NewsCreatedByEmployees");

                    b.Navigation("NewsModifiedByEmployees");

                    b.Navigation("PostRentalReports");

                    b.Navigation("RentalFinishedByEmployees");

                    b.Navigation("RentalStartedByEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
