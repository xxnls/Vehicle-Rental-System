<UserControl
    x:Class="BackOffice.Views.Employees.EmployeeShiftTypesView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:customControls="clr-namespace:BackOffice.Views.CustomControls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:employees="clr-namespace:BackOffice.ViewModels.Employees"
    xmlns:generic="clr-namespace:BackOffice.Resources.Generic"
    xmlns:helpers="clr-namespace:BackOffice.Helpers"
    xmlns:local="clr-namespace:BackOffice.Views.Employees"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:res="clr-namespace:BackOffice.Resources.EmployeeShiftTypes"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">

    <UserControl.DataContext>
        <employees:EmployeeShiftTypesViewModel x:Name="DataContext" />
    </UserControl.DataContext>

    <UserControl.Resources>
        <Style TargetType="Label">
            <Setter Property="ContentStringFormat" Value="{}{0}:" />
        </Style>
    </UserControl.Resources>

    <StackPanel Orientation="Vertical">
        <!--  Create/Edit Mode  -->
        <Grid Visibility="{Binding IsCreatingOrEditing, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <Border Style="{StaticResource CreateEditBorderStyle}">
                <StackPanel Orientation="Vertical">
                    <Label Content="{x:Static res:Resources.ShiftName}" />
                    <TextBox Text="{Binding EditableModel.Name, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBlock
                        helpers:ValidationHelper.PropertyName="Name"
                        Foreground="{StaticResource ErrorBrush}"
                        Text="{Binding (helpers:ValidationHelper.ErrorText), RelativeSource={RelativeSource Self}}" />

                    <Label Content="{x:Static res:Resources.ShiftStartTime}" />
                    <xctk:TimePicker
                        Format="Custom"
                        FormatString="HH:mm"
                        ShowDropDownButton="True"
                        TextAlignment="Left"
                        Value="{Binding EditableModel.TimeStart, UpdateSourceTrigger=PropertyChanged}" />

                    <TextBlock
                        helpers:ValidationHelper.PropertyName="TimeStart"
                        Foreground="{StaticResource ErrorBrush}"
                        Text="{Binding (helpers:ValidationHelper.ErrorText), RelativeSource={RelativeSource Self}}" />

                    <Label Content="{x:Static res:Resources.ShiftEndTime}" />
                    <xctk:TimePicker
                        Format="Custom"
                        FormatString="HH:mm"
                        ShowDropDownButton="True"
                        TextAlignment="Left"
                        Value="{Binding EditableModel.TimeEnd, UpdateSourceTrigger=PropertyChanged}" />

                    <TextBlock
                        helpers:ValidationHelper.PropertyName="TimeEnd"
                        Foreground="{StaticResource ErrorBrush}"
                        Text="{Binding (helpers:ValidationHelper.ErrorText), RelativeSource={RelativeSource Self}}" />
                </StackPanel>
            </Border>

            <customControls:CreateEditSaveCancelControl
                Grid.Row="1"
                CancelCommand="{Binding SwitchToListModeCommand}"
                HasErrors="{Binding HasErrors}"
                SaveCommand="{Binding CreateModelCommand}"
                Visibility="{Binding IsCreating, Converter={StaticResource BooleanToVisibilityConverter}}" />

            <customControls:CreateEditSaveCancelControl
                Grid.Row="1"
                CancelCommand="{Binding SwitchToListModeCommand}"
                HasErrors="{Binding HasErrors}"
                SaveCommand="{Binding UpdateModelCommand}"
                Visibility="{Binding IsEditing, Converter={StaticResource BooleanToVisibilityConverter}}" />
        </Grid>

        <!--  List Mode  -->
        <StackPanel Visibility="{Binding IsListVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <customControls:CRUDButtonsControl
                    Grid.Column="0"
                    AddCommand="{Binding SwitchToCreateModeCommand}"
                    DeleteCommand="{Binding DeleteModelCommand}"
                    DeleteVisibility="{Binding ShowDeleted, Converter={StaticResource InverseBooleanConverter}}"
                    EditCommand="{Binding SwitchToEditModeCommand}"
                    LoadCommand="{Binding LoadModelsCommand}"
                    RestoreCommand="{Binding RestoreModelCommand}"
                    RestoreCommandParameter="{Binding EditableModel.EmployeeShiftTypeId}"
                    RestoreVisibility="{Binding ShowDeleted}" />

                <customControls:SearchControl Grid.Column="1" SearchCommand="{Binding SearchCommand}" />

                <customControls:FilterButtonsControl
                    Grid.Column="2"
                    Margin="0,0,5,0"
                    ShowDeletedModelsCommand="{Binding ShowDeletedModelsCommand}"
                    ShowFilterOptionsCommand="{Binding ShowFilterOptionsCommand}" />
            </Grid>

            <customControls:FilterOptionsControl
                CreatedAfter="{Binding CreatedAfter, Mode=TwoWay}"
                CreatedBefore="{Binding CreatedBefore, Mode=TwoWay}"
                FilterCommand="{Binding LoadModelsCommand}"
                ModifiedAfter="{Binding ModifiedAfter, Mode=TwoWay}"
                ModifiedBefore="{Binding ModifiedBefore, Mode=TwoWay}"
                Visibility="{Binding IsFiltering, Converter={StaticResource BooleanToVisibilityConverter}}" />

            <DataGrid
                ItemsSource="{Binding Models}"
                SelectedItem="{Binding EditableModel, Mode=TwoWay}"
                Style="{StaticResource DefaultDataGridStyle}">
                <DataGrid.InputBindings>
                    <MouseBinding
                        Command="{Binding ShowDetailedInfoCommand}"
                        CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Mode=OneWay}"
                        Gesture="LeftDoubleClick" />
                </DataGrid.InputBindings>
                <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding EmployeeShiftTypeId}" Header="ID" />
                    <DataGridTextColumn Binding="{Binding Name}" Header="{x:Static res:Resources.ShiftName}" />
                    <DataGridTextColumn Binding="{Binding TimeStart, StringFormat=HH:mm}" Header="{x:Static res:Resources.ShiftStartTime}" />
                    <DataGridTextColumn Binding="{Binding TimeEnd, StringFormat=HH:mm}" Header="{x:Static res:Resources.ShiftEndTime}" />
                    <DataGridTextColumn Binding="{Binding CreatedDate}" Header="{x:Static generic:Resources.CreatedDate}" />
                    <DataGridTextColumn Binding="{Binding ModifiedDate}" Header="{x:Static generic:Resources.ModifiedDate}" />
                    <DataGridTextColumn
                        Binding="{Binding DeletedDate}"
                        Header="{x:Static generic:Resources.DeletedDate}"
                        Visibility="{Binding ShowDeleted, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference Name=DataContext}}" />
                </DataGrid.Columns>
            </DataGrid>

            <!--  Pagination  -->
            <customControls:PaginationControl
                CanLoadNextPage="{Binding CanLoadNextPage}"
                CanLoadPreviousPage="{Binding CanLoadPreviousPage}"
                CurrentPage="{Binding CurrentPage}"
                ModelsPerPage="{Binding PageSize}"
                NextPageCommand="{Binding LoadNextPageCommand}"
                PreviousPageCommand="{Binding LoadPreviousPageCommand}"
                TotalItemCount="{Binding TotalItemCount}" />
        </StackPanel>
    </StackPanel>
</UserControl>
