<UserControl x:Class="BackOffice.Views.Vehicles.VehicleModelsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:BackOffice.Views.Vehicles"
             xmlns:customControls="clr-namespace:BackOffice.Views.CustomControls"
             xmlns:helpers="clr-namespace:BackOffice.Helpers"
             xmlns:res="clr-namespace:BackOffice.Resources.VehicleModels"
             xmlns:generic="clr-namespace:BackOffice.Resources.Generic"
             xmlns:vehicles="clr-namespace:BackOffice.ViewModels.Vehicles"
             xmlns:system="clr-namespace:System;assembly=System.Runtime"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.DataContext>
        <vehicles:VehicleModelsViewModel x:Name="DataContext"/>
    </UserControl.DataContext>

    <UserControl.Resources>
        <Style TargetType="Label">
            <Setter Property="ContentStringFormat" Value="{}{0}:"/>
        </Style>
    </UserControl.Resources>


    <StackPanel Orientation="Vertical">
        <Grid Visibility="{Binding IsCreating, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>

            <Border Style="{StaticResource CreateEditBorderStyle}">
                <StackPanel Orientation="Vertical">
                    <!-- Input Fields -->
                    <Label Content="{x:Static generic:Resources.Name}"/>
                    <TextBox x:Name="NameField" Text="{Binding EditableModel.Name, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBlock Foreground="{StaticResource ErrorBrush}"
                               helpers:ValidationHelper.PropertyName="Name"
                               Text="{Binding (helpers:ValidationHelper.ErrorText), RelativeSource={RelativeSource Self}}" />

                    <Label Content="{x:Static generic:Resources.Description}"/>
                    <TextBox x:Name="DescriptionField" Text="{Binding EditableModel.Description, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBlock Foreground="{StaticResource ErrorBrush}"
                               helpers:ValidationHelper.PropertyName="Description"
                               Text="{Binding (helpers:ValidationHelper.ErrorText), RelativeSource={RelativeSource Self}}" />

                    <Label Content="{x:Static res:Resources.VehicleBrand}"/>
                    <TextBox Text="{Binding EditableModel.VehicleBrandId, UpdateSourceTrigger=PropertyChanged}" 
                             IsReadOnly="True"/>
                    <TextBlock Foreground="{StaticResource ErrorBrush}"
                               helpers:ValidationHelper.PropertyName="VehicleBrandId"
                               Text="{Binding (helpers:ValidationHelper.ErrorText), RelativeSource={RelativeSource Self}}" />
                    <Button Content="Select Brand" 
                            Command="{Binding ShowSelectorDialogCommand}"
                            CommandParameter="{Binding SelectVehicleBrandIdParameters}"
                            Style="{StaticResource DefaultButtonStyle}"
                            Width="100"
                            HorizontalAlignment="Left">
                    </Button>

                    <Label Content="{x:Static res:Resources.EngineSize}"/>
                    <TextBox x:Name="EngineSizeField" Text="{Binding EditableModel.EngineSize, UpdateSourceTrigger=PropertyChanged, StringFormat=N2}"
                             PreviewTextInput="IntegerValidationTextBox"/>
                    <TextBlock Foreground="{StaticResource ErrorBrush}"
                               helpers:ValidationHelper.PropertyName="EngineSize"
                               Text="{Binding (helpers:ValidationHelper.ErrorText), RelativeSource={RelativeSource Self}}" />

                    <Label Content="{x:Static res:Resources.HorsePower}"/>
                    <TextBox x:Name="HorsePowerField" Text="{Binding EditableModel.HorsePower, UpdateSourceTrigger=PropertyChanged}"
                             PreviewTextInput="IntegerValidationTextBox"/>
                    <TextBlock Foreground="{StaticResource ErrorBrush}"
                               helpers:ValidationHelper.PropertyName="HorsePower"
                               Text="{Binding (helpers:ValidationHelper.ErrorText), RelativeSource={RelativeSource Self}}" />

                    <Label Content="{x:Static res:Resources.FuelType}"/>
                    <ComboBox x:Name="FuelTypeComboBox"
                              SelectedItem="{Binding EditableModel.FuelType, UpdateSourceTrigger=PropertyChanged}">
                        <ComboBox.ItemsSource>
                            <x:Array Type="system:String">
                                <system:String>Petrol</system:String>
                                <system:String>Diesel</system:String>
                                <system:String>Electric</system:String>
                                <system:String>Hybrid</system:String>
                            </x:Array>
                        </ComboBox.ItemsSource>
                    </ComboBox>
                    <TextBlock Foreground="{StaticResource ErrorBrush}"
                               helpers:ValidationHelper.PropertyName="FuelType"
                               Text="{Binding (helpers:ValidationHelper.ErrorText), RelativeSource={RelativeSource Self}}" />
                </StackPanel>
            </Border>

            <!-- Action Buttons -->
            <customControls:CreateEditSaveCancelControl Grid.Row="1"
                                             SaveCommand="{Binding CreateModelCommand}"
                                             CancelCommand="{Binding SwitchToListModeCommand}"
                                             HasErrors="{Binding HasErrors}"/>
        </Grid>

        <Grid Visibility="{Binding IsEditing, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>

            <Border Style="{StaticResource CreateEditBorderStyle}">
                <StackPanel Orientation="Vertical">
                    <!-- Input Fields -->
                    <Label Content="{x:Static generic:Resources.Name}" ContentStringFormat="{}{0}:"/>
                    <TextBox x:Name="EditNameField" Text="{Binding EditableModel.Name, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBlock Foreground="{StaticResource ErrorBrush}"
                               helpers:ValidationHelper.PropertyName="Name"
                               Text="{Binding (helpers:ValidationHelper.ErrorText), RelativeSource={RelativeSource Self}}" />

                    <Label Content="{x:Static generic:Resources.Description}" ContentStringFormat="{}{0}:"/>
                    <TextBox x:Name="EditDescriptionField" Text="{Binding EditableModel.Description, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBlock Foreground="{StaticResource ErrorBrush}"
                               helpers:ValidationHelper.PropertyName="Description"
                               Text="{Binding (helpers:ValidationHelper.ErrorText), RelativeSource={RelativeSource Self}}" />

                    <Label Content="{x:Static res:Resources.EngineSize}" ContentStringFormat="{}{0}:"/>
                    <TextBox x:Name="EditEngineSizeField" Text="{Binding EditableModel.EngineSize, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBlock Foreground="{StaticResource ErrorBrush}"
                               helpers:ValidationHelper.PropertyName="EngineSize"
                               Text="{Binding (helpers:ValidationHelper.ErrorText), RelativeSource={RelativeSource Self}}" />

                    <Label Content="{x:Static res:Resources.HorsePower}" ContentStringFormat="{}{0}:"/>
                    <TextBox x:Name="EditHorsePowerField" Text="{Binding EditableModel.HorsePower, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBlock Foreground="{StaticResource ErrorBrush}"
                               helpers:ValidationHelper.PropertyName="HorsePower"
                               Text="{Binding (helpers:ValidationHelper.ErrorText), RelativeSource={RelativeSource Self}}" />

                    <Label Content="{x:Static res:Resources.FuelType}" ContentStringFormat="{}{0}:"/>
                    <TextBox x:Name="EditFuelTypeField" Text="{Binding EditableModel.FuelType, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBlock Foreground="{StaticResource ErrorBrush}"
                               helpers:ValidationHelper.PropertyName="FuelType"
                               Text="{Binding (helpers:ValidationHelper.ErrorText), RelativeSource={RelativeSource Self}}" />
                </StackPanel>
            </Border>

            <!-- Action Buttons -->
            <customControls:CreateEditSaveCancelControl Grid.Row="1"
                                            SaveCommand="{Binding UpdateModelCommand}"
                                            CancelCommand="{Binding SwitchToListModeCommand}"
                                            HasErrors="{Binding HasErrors}"/>
        </Grid>

        <StackPanel Visibility="{Binding IsListVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <customControls:CRUDButtonsControl LoadCommand="{Binding LoadModelsCommand}"
                                   AddCommand="{Binding SwitchToCreateModeCommand}"
                                   EditCommand="{Binding SwitchToEditModeCommand}"
                                   DeleteCommand="{Binding DeleteModelCommand}"
                                   DeleteVisibility="{Binding ShowDeleted, Converter={StaticResource InverseBooleanConverter}}"
                                   RestoreCommand="{Binding RestoreModelCommand}"
                                   RestoreCommandParameter="{Binding EditableModel.VehicleModelId}"
                                   RestoreVisibility="{Binding ShowDeleted}"
                                   Grid.Column="0"/>

                <customControls:SearchControl Grid.Column="1"
                                  SearchCommand="{Binding SearchCommand}"/>

                <customControls:FilterButtonsControl ShowFilterOptionsCommand="{Binding ShowFilterOptionsCommand}"
                                         ShowDeletedModelsCommand="{Binding ShowDeletedModelsCommand}"
                                         Grid.Column="2"
                                         Margin="0,0,5,0"/>
            </Grid>

            <customControls:FilterOptionsControl Visibility="{Binding IsFiltering, Converter={StaticResource BooleanToVisibilityConverter}}"
                                     CreatedBefore="{Binding CreatedBefore, Mode=TwoWay}"
                                     CreatedAfter="{Binding CreatedAfter, Mode=TwoWay}"
                                     ModifiedBefore="{Binding ModifiedBefore, Mode=TwoWay}"
                                     ModifiedAfter="{Binding ModifiedAfter, Mode=TwoWay}"
                                     FilterCommand="{Binding LoadModelsCommand}"/>

            <!--Data Grid-->
            <DataGrid x:Name="MainDataGrid" 
                      ItemsSource="{Binding Models}"
                      Style="{StaticResource DefaultDataGridStyle}"
                      SelectedItem="{Binding EditableModel, Mode=TwoWay}">
                <DataGrid.InputBindings>
                    <MouseBinding Gesture="LeftDoubleClick" Command="{Binding ShowDetailedInfoCommand}"
                                  CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Mode=OneWay}" />
                </DataGrid.InputBindings>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="ID" Binding="{Binding VehicleModelId}" />
                    <DataGridTextColumn Header="{x:Static generic:Resources.Name}" Binding="{Binding Name}" />
                    <DataGridTextColumn Header="{x:Static generic:Resources.Description}" Binding="{Binding Description}" />
                    <DataGridTextColumn Header="{x:Static res:Resources.EngineSize}" Binding="{Binding EngineSize}" />
                    <DataGridTextColumn Header="{x:Static res:Resources.HorsePower}" Binding="{Binding HorsePower}" />
                    <DataGridTextColumn Header="{x:Static res:Resources.FuelType}" Binding="{Binding FuelType}" />
                    <DataGridTextColumn Header="{x:Static generic:Resources.CreatedDate}" Binding="{Binding CreatedDate}"/>
                    <DataGridTextColumn Header="{x:Static generic:Resources.ModifiedDate}" Binding="{Binding ModifiedDate}"/>
                    <DataGridTextColumn Header="{x:Static generic:Resources.DeletedDate}" Binding="{Binding DeletedDate}"
                                        Visibility="{Binding ShowDeleted, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference Name=DataContext}}"/>
                </DataGrid.Columns>
            </DataGrid>

            <!-- Pagination -->
            <customControls:PaginationControl CurrentPage="{Binding CurrentPage}" 
                                  TotalItemCount="{Binding TotalItemCount}"
                                  ModelsPerPage="{Binding PageSize}"
                                  CanLoadPreviousPage="{Binding CanLoadPreviousPage}" 
                                  CanLoadNextPage="{Binding CanLoadNextPage}" 
                                  PreviousPageCommand="{Binding LoadPreviousPageCommand}" 
                                  NextPageCommand="{Binding LoadNextPageCommand}" />

        </StackPanel>

    </StackPanel>
</UserControl>
